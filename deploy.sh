#!/bin/bash

# OBTV Streaming Platform Deployment Script
# This script sets up and deploys the OBTV streaming application with Docker

set -e

echo "üöÄ OBTV Streaming Platform Deployment"
echo "======================================"

# Function to install Docker
install_docker() {
    echo "üîß Installing Docker..."
    
    # Detect operating system
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if command -v apt-get &> /dev/null; then
            # Ubuntu/Debian
            echo "üì¶ Detected Ubuntu/Debian - installing Docker via apt"
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
        elif command -v yum &> /dev/null; then
            # CentOS/RHEL
            echo "üì¶ Detected CentOS/RHEL - installing Docker via yum"
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
        elif command -v dnf &> /dev/null; then
            # Fedora
            echo "üì¶ Detected Fedora - installing Docker via dnf"
            sudo dnf -y install dnf-plugins-core
            sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
            sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
        else
            echo "‚ùå Unsupported Linux distribution. Please install Docker manually."
            echo "Visit: https://docs.docker.com/engine/install/"
            exit 1
        fi
        
        # Add user to docker group to avoid sudo requirement
        sudo usermod -aG docker $USER
        echo "‚ö†Ô∏è  You may need to log out and back in for Docker group changes to take effect"
        
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        echo "üì¶ Detected macOS"
        if command -v brew &> /dev/null; then
            echo "üç∫ Installing Docker Desktop via Homebrew"
            brew install --cask docker
            echo "‚ö†Ô∏è  Please start Docker Desktop from Applications after installation"
        else
            echo "‚ùå Homebrew not found. Please install Docker Desktop manually:"
            echo "Visit: https://docs.docker.com/desktop/install/mac-install/"
            exit 1
        fi
    else
        echo "‚ùå Unsupported operating system. Please install Docker manually."
        echo "Visit: https://docs.docker.com/engine/install/"
        exit 1
    fi
}

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "üîç Docker not found. Would you like to install it automatically? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        install_docker
        echo "‚úÖ Docker installation completed"
    else
        echo "‚ùå Docker is required. Please install Docker manually and run this script again."
        echo "Visit: https://docs.docker.com/engine/install/"
        exit 1
    fi
fi

# Verify Docker installation
if ! docker --version &> /dev/null; then
    echo "‚ùå Docker installation failed or Docker daemon is not running"
    echo "Please start Docker and try again, or install manually"
    exit 1
fi

# Check Docker Compose (try both standalone and plugin versions)
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo "üîç Docker Compose not found"
    # Try to install docker-compose via pip as fallback
    if command -v pip3 &> /dev/null; then
        echo "üì¶ Installing Docker Compose via pip3"
        pip3 install docker-compose
    elif command -v pip &> /dev/null; then
        echo "üì¶ Installing Docker Compose via pip"
        pip install docker-compose
    else
        echo "‚ùå Docker Compose is required but could not be installed automatically"
        echo "The Docker installation should include Docker Compose plugin"
        echo "Please ensure Docker is properly installed and try again"
        exit 1
    fi
fi

echo "‚úÖ Docker and Docker Compose are ready"

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "üìù Creating .env file..."
    cat > .env << EOF
# OBTV Streaming Platform Environment Variables
# IMPORTANT: Change these values for production!

# Database Configuration
POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
DATABASE_URL=postgresql://obtv_user:\${POSTGRES_PASSWORD}@postgres:5432/obtv_streaming

# Application Security  
SESSION_SECRET=$(openssl rand -base64 32)
NODE_ENV=production
PORT=5000

# Generated on $(date)
EOF
    echo "‚úÖ .env file created with secure random values"
    echo "‚ö†Ô∏è  Please review and customize the .env file before deploying"
else
    echo "‚úÖ .env file already exists"
fi

# Create generated_images directory if it doesn't exist
mkdir -p client/public/generated_images
echo "‚úÖ Generated images directory created"

# Build and start services
echo "üî® Building Docker images..."
if command -v docker-compose &> /dev/null; then
    docker-compose build --no-cache
else
    docker compose build --no-cache
fi

echo "üóÑÔ∏è  Starting PostgreSQL database..."
if command -v docker-compose &> /dev/null; then
    docker-compose up -d postgres
else
    docker compose up -d postgres
fi

# Wait for database to be ready
echo "‚è≥ Waiting for database to be ready..."
sleep 10

# Run database migrations using dedicated migration service
echo "üìä Running database migrations..."
if command -v docker-compose &> /dev/null; then
    docker-compose --profile migrate run --rm migrate
else
    docker compose --profile migrate run --rm migrate
fi

echo "üöÄ Starting application..."
if command -v docker-compose &> /dev/null; then
    docker-compose up -d
else
    docker compose up -d
fi

echo ""
echo "‚úÖ OBTV Streaming Platform deployed successfully!"
echo ""
echo "üåê Application URL: http://localhost:5000"
echo "üóÑÔ∏è  Database URL: localhost:5432"
echo ""
echo "üìã Useful commands:"
echo "  View logs:           docker-compose logs -f"
echo "  Stop services:       docker-compose down"
echo "  Restart services:    docker-compose restart"
echo "  Database shell:      docker-compose exec postgres psql -U obtv_user -d obtv_streaming"
echo ""
echo "‚ö†Ô∏è  Security Notes:"
echo "  - Change default passwords in .env file"
echo "  - Set up SSL certificates for production"
echo "  - Configure firewall rules"
echo "  - Regular database backups"
echo ""