version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: obtv_streaming
      POSTGRES_USER: obtv_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-obtv_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # Removed port exposure for security - only accessible internally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U obtv_user -d obtv_streaming"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obtv_network

  # Database migration service (optional - handled by entrypoint script)
  migrate:
    build:
      context: .
      target: builder
    environment:
      DATABASE_URL: postgresql://obtv_user:${POSTGRES_PASSWORD:-obtv_secure_password}@postgres:5432/obtv_streaming
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm run db:push || npm run db:push -- --force"
    profiles:
      - migrate

  # Database seeding service (optional - handled by entrypoint script)
  seed:
    build:
      context: .
      target: builder
    environment:
      DATABASE_URL: postgresql://obtv_user:${POSTGRES_PASSWORD:-obtv_secure_password}@postgres:5432/obtv_streaming
      PASSCODE_PEPPER: ${PASSCODE_PEPPER:-obtv-universal-pepper-change-in-production}
      ADMIN_PASSCODE: ${ADMIN_PASSCODE:-1234}
      USER_PASSCODE: ${USER_PASSCODE:-1111}
    depends_on:
      postgres:
        condition: service_healthy
    command: tsx seed.js
    profiles:
      - seed

  # OBTV Streaming Application with HLS Support
  app:
    build: 
      context: .
      target: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://obtv_user:${POSTGRES_PASSWORD:-obtv_secure_password}@postgres:5432/obtv_streaming
      SESSION_SECRET: ${SESSION_SECRET:-your_secure_session_secret_change_this}
      PORT: 5000
      # Enable safe seeding in production mode
      SAFE_SEED_USERS: true
      PASSCODE_PEPPER: ${PASSCODE_PEPPER:-obtv-universal-pepper-change-in-production}
      ADMIN_PASSCODE: ${ADMIN_PASSCODE:-1234}
      USER_PASSCODE: ${USER_PASSCODE:-1111}
      # SRS Server Configuration for Snapshot Generation
      # The system auto-detects servers and ports from WHEP URLs
      # Only set this if you need a fallback when WHEP URL parsing fails
      SRS_HTTP_FLV_BASE: ${SRS_HTTP_FLV_BASE:-}
      # Optional: Force HTTPS if your SRS uses SSL
      SRS_FORCE_HTTPS: ${SRS_FORCE_HTTPS:-false}
      # HLS Stream Configuration for Production - Optimized for Docker
      # FFmpeg timeout for HLS stream connections (seconds) - increased for Docker networking
      HLS_CONNECTION_TIMEOUT: ${HLS_CONNECTION_TIMEOUT:-15}
      # Maximum retry attempts for failed HLS snapshots
      HLS_MAX_RETRIES: ${HLS_MAX_RETRIES:-5}
      # Snapshot generation interval (seconds) - reduced for more frequent updates
      SNAPSHOT_INTERVAL: ${SNAPSHOT_INTERVAL:-25}
      # FFmpeg additional options for HLS processing in Docker
      FFMPEG_LOGLEVEL: ${FFMPEG_LOGLEVEL:-error}
      # Network timeouts optimized for containerized environment
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-20}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./attached_assets/generated_images:/app/server/public/generated_images
      - snapshots_data:/app/server/public/snapshots
    # Using healthcheck defined in Dockerfile with enhanced HLS support
    networks:
      - obtv_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    profiles:
      - with-nginx
    networks:
      - obtv_network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: obtv_postgres_data
  snapshots_data:
    driver: local
    name: obtv_snapshots_data

# Custom network for better container isolation and communication
networks:
  obtv_network:
    driver: bridge
    name: obtv_network