version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: obtv_streaming
      POSTGRES_USER: obtv_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-obtv_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # Removed port exposure for security - only accessible internally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U obtv_user -d obtv_streaming"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database migration service
  migrate:
    build:
      context: .
      target: builder
    environment:
      DATABASE_URL: postgresql://obtv_user:${POSTGRES_PASSWORD:-obtv_secure_password}@postgres:5432/obtv_streaming
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run db:push
    profiles:
      - migrate

  # OBTV Streaming Application
  app:
    build: .
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://obtv_user:${POSTGRES_PASSWORD:-obtv_secure_password}@postgres:5432/obtv_streaming
      SESSION_SECRET: ${SESSION_SECRET:-your_secure_session_secret_change_this}
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./client/public/generated_images:/app/client/public/generated_images
    # Removed healthcheck - using the one defined in Dockerfile

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local